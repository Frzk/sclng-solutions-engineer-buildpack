#!/usr/bin/env bash

#set -euo pipefail
set -eo pipefail

BUILD_DIR="${1:-}"
CACHE_DIR="${2:-}"
ENV_DIR="${3:-}"

STACK="${STACK:-scalingo-20}"

LIBVIPS_DIR="${BUILD_DIR}/vendor/libvips"
LIBVIPS_VERSION="${LIBVIPS_VERSION:-8.12.2}"

basedir="$( cd -P "$( dirname "$0" )" && pwd )"
BUILDPACK_DIR="$( readlink -f "${basedir}/.." )"

source "${BUILDPACK_DIR}/lib/common.sh"
export_env_dir "${ENV_DIR}"

if [ -n "${BUILDPACK_DEBUG:-}" ]
then
    set -x
fi


# Helpers
function indent() {
    c='s/^/       /'

    case $(uname) in
        Darwin) sed -l "$c";;
        *)      sed -u "$c";;
    esac
}

function arrow() {
    sed -u 's/^/-----> /'
}


# Prepares the environment by creating the necessary directories.
function prepare() {
    rm -Rf "${LIBVIPS_DIR}"

    mkdir -p "${CACHE_DIR}"
    mkdir -p "${ENV_DIR}"
    mkdir -p "${LIBVIPS_DIR}"

    get_stack
    get_version
}

# Try to get STACK version from environment
function get_stack() {
    if [ -d "${ENV_DIR}/STACK" ]
    then
        STACK=$( cat "${ENV_DIR}/STACK" )
    fi
}

# Try to get LIBVIPS version from environment
function get_version() {
    if [ -d "${ENV_DIR}/LIBVIPS_VERSION" ]
    then
        LIBVIPS_VERSION=$( cat "${ENV_DIR}/LIBVIPS_VERSION" )
    fi

    echo "Using version ${LIBVIPS_VERSION}" | indent
}

# Install libvips
# The process is fairly simple:
#   - check if we have the wanted version in our pre-compiled binaries
#   - if so, copy them to /build/vendor/libvips/
#   - else, throw an error.
function install() {
    local archive
    local src

    archive="${STACK}_vips-${LIBVIPS_VERSION}"
    src="${BUILDPACK_DIR}/compiled/${archive}.tar.gz"

    echo "Installing libvips" | arrow

    if [ -f "${src}" ]
    then
        unpack "${src}" "${LIBVIPS_DIR}"
    else
        echo "libvips ${LIBVIPS_VERSION} is not available for the stack ${STACK}." | indent
        echo "You may either chose another version or build it yourself using the builder.sh script." | indent
        exit 100
    fi
}

# Unpacks the given archive to the given path
function unpack() {
    local src
    local dst

    src="${1}"; shift
    dst="${1}"; shift

    echo "Unpacking" | indent
    tar xf "${src}" -C "${dst}"
}

# Writes .profile.d scripts
function write_profiled() {
    echo "Writing profile.d script" | arrow

    mkdir -p "${BUILD_DIR}/.profile.d"

    cat <<EOF > "${BUILD_DIR}/.profile.d/libvips.env.sh"
export PATH="${LIBVIPS_DIR}/bin:\${PATH}"
export LD_LIBRARY_PATH="${LIBVIPS_DIR}/lib:\${LD_LIBRARY_PATH}"
export LIBRARY_PATH="${LIBVIPS_DIR}/lib:\${LIBRARY_PATH}"
export PKG_CONFIG_PATH="${LIBVIPS_DIR}/lib/pkgconfig:\${PKG_CONFIG_PATH}"
export CPPPATH="${LIBVIPS_DIR}/include:\$CPPPATH"
export CPATH="${LIBVIPS_DIR}/include:\$CPATH"
EOF

    source "${BUILD_DIR}/.profile.d/libvips.env.sh"
}


prepare
install
write_profiled
